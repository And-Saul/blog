{
  "hash": "1af751d544585f99b8fe125f82ff0ce5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction to R User-defined functions\" \nauthor: \"Andrew Saul\" \ndate: \"2025-02-17\"\ncategories: [R Tutorial] \nimage: \"image.png\" \nlightbox: true \nformat:    \n  html:     \n    fig-numbering: true     \n    tbl-cap-location: top \n---\n\n\n\n\n\n\n# Two types of functions in R\n\n-   Built in functions\n-   User-defined functions\n\n**Functions were created in the epoch before tidyverse** - Functions designed for base R\n\n# User defined functions\n\n## Why (see R4DS <https://r4ds.hadley.nz/functions.html>, <https://adv-r.hadley.nz/functions.html>)?\n\n-   You can give a function an evocative name that makes your code easier to understand.\n\n-   As requirements change, you only need to update code in one place, instead of many.\n\n-   You eliminate the chance of making incidental mistakes when you copy and paste (i.e. updating a variable name in one place, but not in another).\n\n## Components\n\nA user-defined function has four components.\n\n-   name\n\n-   body : code inside the function\n\n-   formals() : the names of variables that are used within the body of the function that take the value of arguments from the (global) environment. Parameters are typed in the function definition, located within the parentheses ie. function(param1, param2, ...)\n\n-   Environment : Where the calculations are performed.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfunction_name <- function(parameter1, parameter2, ...) {\n  BODY\n}\n\n# example : function calculating area of circle\narea_of_circle <- function(radius){\n  {pi}*radius^2\n}\n\n# calling function\narea_of_circle() \n# Error - no argument declared for the parameter radius. A parameter requires an argument\n\narea_of_circle(radius = 4) # function will run because the radius parameter is given the argument 4 in the calling function.\n\n#within the calling function, the parameter need not be declared, but the order of arguments for the parameters becomes important\narea_of_circle(4)\n\n# To avoid an error if no argument supplied in the calling function, a default argument of NULL can be supplied in the function declaration.\narea_of_circle <- function(radius = NULL){\n  \n  return({pi}*radius^2) # {pi} = value of pi ie .~3.142\n  \n} \n\n# Argument not required in calling function. default value = NULL\narea_of_circle()\n\n\n# r object given value in global environment.  Then the parameter radius can be given the argument r in parameter declaration\nr <- 4\narea_of_circle(radius = r)\narea_of_circle(r)\n```\n:::\n\n\n\n\n## parameters\n\nBest to name variables within a function differently from objects in the Global environment. Avoids confusion. Using parameters allows a range of variables to be utilised in the function (at separate executions).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\narea_of_circle <- function(radius = NULL){\n\n  return({pi}*radius^2) # {pi} = value of pi ie .~3.142\n  \n} \n\nr <- 4\ny <- 10\narea_of_circle(radius = r)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 50.26548\n```\n\n\n:::\n\n```{.r .cell-code}\narea_of_circle(radius = y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 314.1593\n```\n\n\n:::\n:::\n\n\n\n\nIf parameters are not declared in the function then the variables must exist within the function (local variables) or (typically) in the global environment\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#--Without parameter declaration--\narea_of_circle <- function(){\n  {pi}*radius^2\n}\n\nradius <- 100\narea_of_circle()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 31415.93\n```\n\n\n:::\n\n```{.r .cell-code}\nradius <- 50\narea_of_circle()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7853.982\n```\n\n\n:::\n:::\n\n\n\n\nMultiple Inputs\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntimes_tables <- function(vector, constant){\n  return(constant*vector)\n}\n\ntimes_tables(vector = 1:12, constant = 6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  6 12 18 24 30 36 42 48 54 60 66 72\n```\n\n\n:::\n:::\n\n\n\n\n## Outputs\n\n-   Output of function must be implicitly or explicitly returned. If explicitly returned, function does not continue after return() command.\n-   If multiple outputs are required, these must be returned as a list\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Implicit \narea_of_circle <- function(radius){\n  {pi}*radius^2\n}\n\n#Explicit\narea_of_circle <- function(radius){\n  return({pi}*radius^2)\n}\n\n# Can terminate function using the <return> statement\narea_of_circle <- function(radius = NULL){\n  \n  if(is.null(radius)){\n    return(message(\"No radius value was entered\"))\n  }\n  \n  return({pi}*radius^2) # {pi} = value of pi ie .~3.142\n  \n} \n\n#Multiple outputs\ncircle_measurements <- function(radius){\n  area <- {pi}*radius^2\n  diameter <- 2*radius\n  \n  list(Area = area, Diameter = diameter)\n}\n\ncircle_measurements(4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$Area\n[1] 50.26548\n\n$Diameter\n[1] 8\n```\n\n\n:::\n:::\n\n\n\n\n# Environments\n\nA function will perform its calculations in a separate environment from that which it is stored (usually the Global Environment).\n\nvalues of variables are imported into the separate functional environment from the environment that the functional object is stored (usually the Global environment),\n\nA variable that is found in the body of the function will take precedence over arguments found in the function declaration or variables found in the parent environment (usually the Global environment).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrad <- 60\narea_of_circle <- function(){\n  rad <- 1\n  {pi}*rad^2\n}\narea_of_circle() # rad has value of 1 \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.141593\n```\n\n\n:::\n\n```{.r .cell-code}\nradius <- 100\narea_of_circle <- function(rad){\n  rad <- 1\n  {pi}*rad^2\n}\n\narea_of_circle(rad=radius) # rad has value 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.141593\n```\n\n\n:::\n:::\n\n\n\n\nA argument in the function declaration will take precedence over a variable located in the parent (usually the Global environment) environment.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nradius <- 5\narea_of_circle <- function(radius){\n  {pi}*radius^2\n}\n#  function argument overrides object in global environment\narea_of_circle(radius = 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 31415.93\n```\n\n\n:::\n:::\n\n\n\n\nAfter the function is completed, its environment and its contents are lost.\n\nNote : the parent environment cannot see the contents (values/functions) within a functional object.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}